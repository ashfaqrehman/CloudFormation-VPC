{
    "Description": "My Cloud Academy Labs 2-Tier Scalable API Template",
    "Parameters": {
        "VPCAZ": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "The Availability Zone to use for the simple VPC.",
            "AllowedPattern" : "^(?!us-west-2d).*$",
            "ConstraintDescription": "Availability zone must not be us-west-2d."
        },
        "NumberOfNodes": {
            "Type": "Number",
            "Description": "The number of EC2 nodes the service should have.",
            "Default": 2
        },
        "NodeSize": {
            "Type": "String",
            "Description": "The type of node to use for your system",
            "Default": "m3.medium"
        },
        "TableThroughput": {
            "Type": "Number",
            "Description": "The number of queries per second the table should support.",
            "Default": 10
        },
        "RunNumber": {
            "Type": "Number",
            "Description": "Used to force the ASG's nodes' UserData to update",
            "Default": "1"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            }
        },
        "PublicSubnet": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Ref": "VPCAZ" },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch" : true,
                "VpcId": { "Ref": "VPC" }
            }
        },
        "PrivateSubnet": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Ref": "VPCAZ" },
                "CidrBlock": "10.0.1.0/24",
                "VpcId": { "Ref": "VPC" }
            }
        },

        "GatewayToInternet": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "NATInstance": {
            "DependsOn": [
                "GatewayAttachmentToVPC",
                "InstancesToNATSecurityGroup",
                "PublicSubnet"
            ],
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": { "Ref": "VPCAZ" },
                "ImageId": "??????",
                "InstanceType": "m3.medium",
                "SecurityGroupIds": [
                    { "Ref": "InstancesToNATSecurityGroup" }
                ],
                "SourceDestCheck": false,
                "SubnetId": { "Ref": "PublicSubnet" }
            }
        },
        "RoutesForPublicSubnet": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" }
            }
        },
        "RoutesForPrivateSubnet": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" }
            }
        },
        "GenericNACL": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" }
            }
        },

        "GatewayAttachmentToVPC": {
            "DependsOn": [
                "GatewayToInternet",
                "VPC"
            ],
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": { "Ref": "GatewayToInternet" },
                "VpcId": { "Ref": "VPC" }
            }
        },
        "RouteToGateway": {
            "DependsOn": [
                "GatewayToInternet",
                "GatewayAttachmentToVPC",
                "RoutesForPublicSubnet"
            ],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "GatewayToInternet" },
                "RouteTableId": { "Ref": "RoutesForPublicSubnet" }
            }
        },
        "RouteToNat": {
            "DependsOn": [
                "NATInstance",
                "RoutesForPrivateSubnet"
            ],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": { "Ref": "NATInstance" },
                "RouteTableId": { "Ref": "RoutesForPrivateSubnet" }
            }
        },
        "NACLInboundEntry": {
            "DependsOn": [
                "GenericNACL"
            ],
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": false,
                "NetworkAclId": { "Ref": "GenericNACL" },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": 100
            }
        },
        "NACLOutboundEntry": {
            "DependsOn": [
                "GenericNACL"
            ],
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "NetworkAclId": { "Ref": "GenericNACL" },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": 100
            }
        },
        "NACLBindingForPublicSubnet": {
            "DependsOn": [
                "PublicSubnet",
                "GenericNACL"
            ],
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "NetworkAclId": { "Ref": "GenericNACL" }
            }
        },
        "NACLBindingForPrivateSubnet": {
            "DependsOn": [
                "PrivateSubnet",
                "GenericNACL"
            ],
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnet" },
                "NetworkAclId": { "Ref": "GenericNACL" }
            }
        },
        "RoutesBindingForPublicSubnet": {
            "DependsOn": [
                "RoutesForPublicSubnet",
                "PublicSubnet"
            ],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "RoutesForPublicSubnet" },
                "SubnetId": { "Ref": "PublicSubnet" }
            }
        },
        "RoutesBindingForPrivateSubnet": {
            "DependsOn": [
                "RoutesForPrivateSubnet",
                "PrivateSubnet"
            ],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "RoutesForPrivateSubnet" },
                "SubnetId": { "Ref": "PrivateSubnet" }
            }
        },


        "LoadBalancer": {
            "DependsOn": [
                "InternetToLBSecurityGroup",
                "PublicSubnet"
            ],
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Listeners": [{
                    "InstancePort": 8888,
                    "InstanceProtocol": "HTTP",
                    "LoadBalancerPort": 80,
                    "Protocol": "HTTP"
                }],
                "Scheme": "internet-facing",
                "SecurityGroups": [{ "Ref": "InternetToLBSecurityGroup" }],
                "Subnets": [{ "Ref": "PublicSubnet" }]
            }
        },
        "InstancesGroup": {
            "DependsOn": [
                "InstancesConfig",
                "LoadBalancer",
                "PrivateSubnet"
            ],
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "Cooldown": 60,
                "DesiredCapacity": { "Ref": "NumberOfNodes" },
                "HealthCheckGracePeriod": 30,
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": { "Ref": "InstancesConfig" },
                "LoadBalancerNames": [{ "Ref": "LoadBalancer" }],
                "MaxSize": { "Ref": "NumberOfNodes" },
                "MetricsCollection": [{ "Granularity": "1Minute" }],
                "MinSize": { "Ref": "NumberOfNodes" },
                "VPCZoneIdentifier": [{ "Ref": "PrivateSubnet" }]
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": 1,
                    "MinInstancesInService": 1,
                    "PauseTime": 30,
                    "WaitOnResourceSignals": false
                }
            }
        },
        "InstancesConfig": {
            "DependsOn": [
                "DynamoAccessInstanceProfile",
                "LBToInstancesSecurityGroup"
            ],
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": false,
                "IamInstanceProfile": { "Ref": "DynamoAccessInstanceProfile" },
                "ImageId": "??????",
                "InstanceMonitoring": true,
                "InstanceType": { "Ref": "NodeSize" },
                "SecurityGroups": [{ "Ref": "LBToInstancesSecurityGroup" }],
                "UserData": { "Fn::Base64": { "Fn::Join": [ "\n", [
                    "#!/bin/bash",
                    { "Fn::Join": [ "", [
                        "echo 'Running number ",
                        { "Ref": "RunNumber" },
                        "' > /tmp/runnum.log"
                    ]]},
                    "yum install --enablerepo=epel -y git nodejs npm",
                    "npm config set registry http://registry.npmjs.org/",
                    "npm install -g forever@0.14.1",
                    "git clone https://github.com/cloudacademy/dynamo-demo",
                    { "Fn::Join": [ "", [
                        "export AWS_REGION=", { "Ref": "AWS::Region" }
                    ]]},
                    "cd dynamo-demo",
                    { "Fn::Join": [ "", [
                        "forever start server.js --port 8888 --table ",
                        { "Ref": "DynamoTableForTodos" } 
                    ]]}
                ]]}}
            }
        },
        "DynamoTableForTodos": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "id",
                    "AttributeType": "S"
                }],
                "KeySchema": [{
                    "AttributeName": "id",
                    "KeyType": "HASH"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": { "Ref": "TableThroughput" },
                    "WriteCapacityUnits": { "Ref": "TableThroughput" }
                }
            }
        },

        "DynamoAccessRole": {},
        "DynamoAccessInstanceProfile": {},

        "LBToInstancesSecurityGroup": {},
        "InternetToLBSecurityGroup": {},
        "InstancesToNATSecurityGroup": {}
    }
}
